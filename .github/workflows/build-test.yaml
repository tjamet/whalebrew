name: Build and test all packages

on:
  workflow_call:
    inputs:
      git_ref:
        type: string
        description: The git reference to build
      test-release-action-integration:
        type: boolean
        default: true
        description: |
          Whether to test the release action with the current project structure or not.
          It should only disabled when building the exact release of a given version.
      publish-artifacts:
        type: boolean
        default: true
        description: |
          Whether to push the build artifacts (i.e. the build binaries)

jobs:
  build:
    strategy:
      matrix:
        os: 
        - ubuntu-latest
        arch:
        - amd64
        # - arm
        # - arm64
        # go-version: ['1.20']
        # include:
        # - os: macos-latest
        #   arch: amd64
        #   go-version: '1.20'
        # - os: macos-latest
        #   arch: arm64
        #   go-version: '1.20'
    name: Build
    runs-on: ${{ matrix.os }}
    steps:
    - name: hello world
      run: echo hello world

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
      with:
        # https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
        # fetch all tags
        fetch-depth: 0
        ref: ${{ inputs.git_ref }} 

    - name: Set up Go ${{ matrix.go-version }}
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
      id: go


    - name: Map binary name
      id: binary
      run: |
        os=$(uname -s)
        case ${{ matrix.arch }} in
          amd64) arch=x86_64 ;;
          *)     arch=${{ matrix.arch }} ;;
        esac
        binary_name=whalebrew-${os}-${arch}
        echo "Binary name: ${binary_name}"
        echo "::set-output name=binary_name::${binary_name}"

    - name: Build
      id: build
      run: |
        now=$(date +'%Y-%m-%d')
        version=0.0.0-fork
        GOARCH=${{ matrix.arch }} go build -v -ldflags "-X github.com/whalebrew/whalebrew/version.Version=${version}" -o ${{ steps.binary.outputs.binary_name }} .

    
    - name: Ensure binary works
      run: ./${{ steps.binary.outputs.binary_name }} version
      if: ${{ !startsWith(matrix.arch, 'arm') }}

    - uses: actions/upload-artifact@v3
      if: ${{ inputs.publish-artifacts }}
      with:
        name: ${{ steps.binary.outputs.binary_name }}
        path: whalebrew-*

    - name: run tests
      if: false
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }} #required

  test-actions:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        action: 
        - release
        - release-assets
    steps:

    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
      with:
        # https://github.com/actions/checkout#fetch-all-history-for-all-tags-and-branches
        # fetch all tags
        fetch-depth: 0
        ref: ${{ inputs.git_ref }} 

    - name: Set up Go 1.20
      uses: actions/setup-go@v4
      with:
        go-version: "1.20"
        cache-dependency-path: |
          actions/${{ matrix.action }}/go.sum
      id: go

    - name: test release ${{ matrix.action }}
      run: |
        git config --global user.email "bot@whalebrew.gha"
        git config --global user.name "Whalebrew release bot"
        (
          cd actions/${{ matrix.action }}
          go test -v  -race -coverprofile=coverage.txt -covermode=atomic ./...
        )
      env:
        TEST_RELEASE_ACTION_INTEGRATION: ${{ inputs.test-release-action-integration }}
    - uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }} #required

  ok:
    name: All CI checks are OK
    runs-on: ubuntu-latest
    needs:
    - build
    - test-actions
    steps:
    - run: echo OK